{"version":3,"sources":["JSONValidationErrorList.js","MonacoJSONEditor.js","App.js","serviceWorker.js","index.js"],"names":["JSONValidationErrorList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markers","length","react_default","a","createElement","style","listStyle","color","map","marker","key","message","startLineNumber","startColumn","React","Component","fetchUrlSchemaFile","_ref","asyncToGenerator","regenerator_default","mark","_callee","schema","response","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","Error","concat","stop","_x","apply","arguments","MonacoJSONEditor","monaco","createRef","emptySchema","JSON","stringify","empty","undefined","editorInstance","create","current","value","language","theme","options","tabSize","formatOnType","formatOnPaste","autoIndent","modelUri","window","Uri","parse","model","createModel","setModel","jsonDefaults","setDiagnosticsOptions","enableSchemaRequest","validate","schemas","fileMatch","setSelection","focus","onresize","_this2","layout","setTimeout","onDidChangeModelContent","onChange","editor","setEditor","newValue","e","onChangeMarkers","getModelMarkers","vimMode","dispose","statusNode","innerHTML","document","getElementById","initVimMode","es","keyName","onKeyDown","onVimKeybind","bind","height","ref","id","App","parsedSchema","refreshEditorData","assertThisInitialized","interval","setInterval","getModels","getValue","setState","clearInterval","display","flexDirection","width","JSONValidationErrorList_JSONValidationErrorList","MonacoJSONEditor_MonacoJSONEditor","setMarkers","className","margin","info","react_markdown_default","source","infoTemplate","servers","serverTemplate","methods","m","methodTemplate","method","join","Boolean","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c31b487f.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\n\nexport default class JSONValidationErrorList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n  render() {\n    if (!this.props.markers || this.props.markers.length === 0) return null;\n    return (\n      <ul style={{listStyle: 'none', color: 'red'}}>\n        {this.props.markers && this.props.markers.map((marker) => {\n           return (\n             <li key={marker.message}>\n               {marker.startLineNumber}:{marker.startColumn} - {marker.message}\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport Hotkeys from 'react-hot-keys';\nimport { render } from 'react-dom';\nimport MonacoEditor from 'react-monaco-editor';\nimport { initVimMode } from 'monaco-vim';\nimport empty from 'json-schema-empty';\nimport * as monaco from 'monaco-editor';\n\nconst fetchUrlSchemaFile = async (schema) => {\n  try {\n    const response = await fetch(schema);\n    return await response.json();\n  } catch(e) {\n    throw new Error(`Unable to download openrpc.json file located at the url: ${schema}`);\n  }\n};\n\nexport default class MonacoJSONEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monaco = React.createRef();\n  }\n  async componentDidMount() {\n    const schema = await fetchUrlSchemaFile('https://raw.githubusercontent.com/open-rpc/meta-schema/master/schema.json');\n    const emptySchema = JSON.stringify(empty(schema), undefined, '\\t');\n\n    this.editorInstance = monaco.editor.create(this.monaco.current, {\n\t    value: emptySchema,\n\t    language: 'json',\n      theme: 'vs-dark',\n      options: {\n        tabSize: 2,\n        formatOnType: true,\n        formatOnPaste: true,\n        autoIndent: true\n      }\n    });\n    const modelUri = window.monaco.Uri.parse(\"inmemory://model/userSpec.json\");\n    const model = monaco.editor.createModel(emptySchema, \"json\", modelUri);\n    this.editorInstance.setModel(model);\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      enableSchemaRequest: true,\n      validate: true,\n      schemas: [\n        {\n          fileMatch: ['*'],\n          schema\n        }\n      ]\n    })\n    this.editorInstance.setSelection(new monaco.Selection(3,13,3,13));\n\n    this.editorInstance.focus();\n    window.onresize = () => this.editorInstance.layout();\n    setTimeout(() => this.editorInstance.layout(), 1000);\n    this.editorInstance.onDidChangeModelContent(() => this.props.onChange(), 1000);\n  }\n  editorDidMount(editor, monaco) {\n    this.setEditor(editor, monaco);\n  }\n  onChange(newValue, e) {\n    this.props.onChangeMarkers(window.monaco.editor.getModelMarkers())\n  }\n  onVimKeybind(e) {\n    if (this.vimMode) {\n      this.vimMode.dispose();\n      this.statusNode.innerHTML = '';\n      this.vimMode = null;\n      return;\n    }\n    this.statusNode = document.getElementById('vim-status-bar');\n    this.vimMode = initVimMode(this.editorInstance, this.statusNode);\n    return;\n  }\n  render() {\n     return (\n      <Hotkeys keyName=\"ctrl+alt+v\" onKeyDown={this.onVimKeybind.bind(this)}>\n        <div style={{height: '100%'}} ref={this.monaco} />\n        <div id=\"vim-status-bar\"></div>\n      </Hotkeys>\n    );\n  }\n}\n","import React, { Suspense } from 'react';\nimport { render } from 'react-dom';\nimport * as monaco from 'monaco-editor';\nimport fetch from 'isomorphic-fetch';\nimport JSONValidationErrorList from './JSONValidationErrorList';\nimport MonacoJSONEditor from './MonacoJSONEditor';\nimport ReactMarkdown from 'react-markdown';\nimport infoTemplate from '@open-rpc/generator-docs/templates/info.template.md.js';\nimport serverTemplate from '@open-rpc/generator-docs/templates/server.template.md.js';\nimport methodTemplate from '@open-rpc/generator-docs/templates/method.template.md.js';\n\nconst fetchUrlSchemaFile = async (schema) => {\n  try {\n    const response = await fetch(schema);\n    return await response.json();\n  } catch(e) {\n    throw new Error(`Unable to download openrpc.json file located at the url: ${schema}`);\n  }\n};\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      markers: [],\n      parsedSchema: {}\n    }\n    this.refreshEditorData = this.refreshEditorData.bind(this);\n  }\n  async componentDidMount() {\n    this.interval = setInterval(this.refreshEditorData, 1000);\n  }\n  refreshEditorData(editorInstance) {\n    const markers = monaco.editor.getModelMarkers();\n    let parsedSchema\n    try {\n      parsedSchema = JSON.parse(monaco.editor.getModels()[0].getValue())\n    } catch (e) {\n    }\n\n    this.setState({\n      markers,\n      parsedSchema: parsedSchema || this.state.parsedSchema\n    });\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  setMarkers(editorInstance) {\n    this.refreshEditorData(editorInstance);\n  }\n  render() {\n    return (\n      <div style={{ height: \"100%\", display: 'flex', flexDirection: 'row' }}>\n        <div style={{ display: 'flex', flexDirection: 'column', height: \"100%\", width: '50%' }} >\n          <JSONValidationErrorList markers={this.state.markers}/>\n          <MonacoJSONEditor onChange={this.setMarkers.bind(this)}/>\n        </div>\n\n        <div className='docs' style={{margin: '40px'}}>\n          {this.state.parsedSchema.info && <ReactMarkdown source={infoTemplate({info: this.state.parsedSchema.info})} />}\n          {this.state.parsedSchema.servers && <ReactMarkdown source={serverTemplate({servers: this.state.parsedSchema.servers})} />}\n          {this.state.parsedSchema.methods && <ReactMarkdown source={this.state.parsedSchema.methods.map((m) => methodTemplate({method: m})).join('')} />}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App style={{height: \"100%\"}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}